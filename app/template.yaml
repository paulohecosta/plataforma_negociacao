AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Description: Simple API Project

Parameters:
  Empty: 
    Type: String
  LambdaRole: 
    Type: String

Resources:
  API: 
    Type: AWS::Serverless::Api 
    Properties: 
      Name: !Sub '${AWS::StackName}-api'
      StageName: dev
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: "'GET,OPTIONS,POST,PUT,PATCH,DELETE'"
        AllowHeaders: "'X-Forwarded-For,Access-Control-Allow-Origin,Access-Control-Allow-Credentials,Access-Control-Allow-Methods,Access-Control-Allow-Headers,Origin,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
        AllowOrigin: "'*'"

  CustomersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-customers-function'
      Runtime: nodejs14.x
      CodeUri: ./src/general/customers
      Handler: index.lambdaHandler
      Role: !Ref LambdaRole
      Layers:
        - !Ref CoreLayer
      Events:
        CustomersFunctionGetAll:
          Type: Api
          Properties:
            Path: /customers
            Method: get
            RestApiId: !Ref API
        CustomersFunctionGet:
          Type: Api
          Properties:
            Path: /customers/{customer_id}
            Method: get
            RestApiId: !Ref API
        CustomersFunctionPost:
          Type: Api
          Properties:
            Path: /customers
            Method: post
            RestApiId: !Ref API
      # Environment:
      #   Variables:
      #     SOCIAL_CONFIG_TABLE: !Sub '${InfraProjectName}-config'
      #     SOCIAL_ORG_TABLE: !Sub '${InfraProjectName}-org'
      #     SOCIAL_USER_TABLE: !Sub '${InfraProjectName}-user'
      #     SOCIAL_SOCIAL_NW_TABLE: !Sub '${InfraProjectName}-social-nw'
      #     SOCIAL_APP_TABLE: !Sub '${InfraProjectName}-app'

  GiroProposalFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-giro-proposal-function'
      Runtime: nodejs14.x
      CodeUri: ./src/general/giro-proposals
      Handler: index.lambdaHandler
      Role: !Ref LambdaRole
      Layers:
        - !Ref CoreLayer
      Events:
        GiroProposalFunctionAll:
          Type: Api
          Properties:
            Path: /products/giro/proposals
            Method: get
            RestApiId: !Ref API
        GiroProposalFunctionGet:
          Type: Api
          Properties:
            Path: /products/giro/proposals/{proposal_id}
            Method: get
            RestApiId: !Ref API
        GiroProposalFunctionPost:
          Type: Api
          Properties:
            Path: /products/giro/proposals
            Method: post
            RestApiId: !Ref API

  NegotiationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-negotation-function'
      Runtime: nodejs14.x
      CodeUri: ./src/general/negotiations
      Handler: index.lambdaHandler
      Role: !Ref LambdaRole
      Layers:
        - !Ref CoreLayer
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: arn:aws:sns:us-east-2:371716203543:plat-infra-negotiation-topic
        NegotiationFunctionGetAll:
          Type: Api
          Properties:
            Path: /negotiations
            Method: get
            RestApiId: !Ref API
        NegotiationFunctionGet:
          Type: Api
          Properties:
            Path: /negotiations/{negotiation_id}
            Method: get
            RestApiId: !Ref API

  TaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-task-function'
      Runtime: nodejs14.x
      CodeUri: ./src/general/tasks
      Handler: index.lambdaHandler
      Role: !Ref LambdaRole
      Layers:
        - !Ref CoreLayer
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: arn:aws:sns:us-east-2:371716203543:plat-infra-task-topic
        TaskFunctionGetAll:
          Type: Api
          Properties:
            Path: /tasks
            Method: get
            RestApiId: !Ref API
        TaskFunctionGet:
          Type: Api
          Properties:
            Path: /tasks/{task_id}
            Method: get
            RestApiId: !Ref API

  CoreLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub '${AWS::StackName}-api'
      Description: Dependencies for API
      ContentUri: ./src/layer/
      CompatibleRuntimes:
        - nodejs12.x
      LicenseInfo: 'MIT'

  # LOGS
  CustomersFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref CustomersFunction]]
      RetentionInDays: 3
  GiroProposalFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref GiroProposalFunction]]
      RetentionInDays: 3
  NegotiationFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref NegotiationFunction]]
      RetentionInDays: 3